// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;
using SmartAuth.Infrastructure;

#nullable disable

namespace SmartAuth.Infrastructure.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20251019095845_AddUserBiometrics")]
    partial class AddUserBiometrics
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartAuth.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<DateTimeOffset?>("LastLoginAt")
                        .HasPrecision(3)
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_salt");

                    b.Property<int>("Status")
                        .HasMaxLength(32)
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", null, t =>
                        {
                            t.HasCheckConstraint("ck_users_email_lowercase", "email = lower(email)");
                        });
                });

            modelBuilder.Entity("SmartAuth.Domain.Entities.UserAuthenticator", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset?>("LastUsedAt")
                        .HasPrecision(3)
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_used_at");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("secret");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_authenticators");

                    b.HasIndex("UserId", "Type")
                        .IsUnique()
                        .HasDatabaseName("ix_user_authenticators_user_id_type");

                    b.ToTable("user_authenticators", (string)null);
                });

            modelBuilder.Entity("SmartAuth.Domain.Entities.UserBiometric", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Vector>("Embedding")
                        .IsRequired()
                        .HasColumnType("vector(512)")
                        .HasColumnName("embedding");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("Kind")
                        .HasColumnType("integer")
                        .HasColumnName("kind");

                    b.Property<int>("LivenessMethod")
                        .HasColumnType("integer")
                        .HasColumnName("liveness_method");

                    b.Property<double>("QualityScore")
                        .HasPrecision(6, 3)
                        .HasColumnType("double precision")
                        .HasColumnName("quality_score");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_user_biometrics");

                    b.HasIndex("UserId", "Kind", "IsActive")
                        .HasDatabaseName("ix_user_biometrics_user_id_kind_is_active");

                    b.ToTable("user_biometrics", (string)null);
                });

            modelBuilder.Entity("SmartAuth.Domain.Entities.UserAuthenticator", b =>
                {
                    b.HasOne("SmartAuth.Domain.Entities.User", "User")
                        .WithMany("Authenticators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_authenticators_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartAuth.Domain.Entities.UserBiometric", b =>
                {
                    b.HasOne("SmartAuth.Domain.Entities.User", "User")
                        .WithMany("Biometrics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_biometrics_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartAuth.Domain.Entities.User", b =>
                {
                    b.Navigation("Authenticators");

                    b.Navigation("Biometrics");
                });
#pragma warning restore 612, 618
        }
    }
}
